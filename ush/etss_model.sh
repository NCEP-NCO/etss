#!/bin/bash
#
   # "HISTORY: Oct 03, 1995 - implement Storm Surge"
   # "HISTORY: Feb 07, 1996 - added qsub to ftp the UCL files"
   # "         from the machine in which it ran to the other"
   # "         two Crays."
   # "         Linked the gribex executable in here file exapplywnd,"
   # "         to a more discriptive word to aid in monitoring"
   # "         We no longer save the old cylf10'${bsn}' file to the"
   # "         com files, it is saved only to $PARMetss dir."
   # "         In here file output_hds, place directions to submit"
   # "         the file to the front end in case of an ftp failure"
   # "         In here file output_com, took off the .new from"
   # "         file ss.${CYCLE}.cylf10'${bsn}' Also, the file"
   # "         ss.gribi${CYL} has '${bsn}' appended on it."
   # "         In here file SENDBULLETIN, added a test for the ftp"
   # "         transfer of the jcl to the HDS."
   # "HISTORY: 03/19/96 - Major script changes."
   # "         01/28/97 - Script changes to use the Cray version"
   # "         of FORMBULL to generate the FQUS23, the FQAC40,"
   # "         and the FQGX40 messages which contain the extra-"
   # "         tropical storm surge forecasts for the Atlantic"
   # "         Coast, the Bering Sea, and the Gulf of Mexico,"
   # "         respectively"
   # "         02/07/97 - Removed as many references to HDS as possible"
   # "                    operator messages can still be disposed to HDS"
   # "         04/30/97 - Added qsub to kick off MDL owned job."
   # "         08/26/98 - Data is no longer stored in /nwprod/mdl/parm."
   # "                    Instead it will be in /com/gfs/prod/gfs.YYMMDD."
   # "         09/02/98 - Modified by Peter Henrichsen to use script"
   # "                    onebul.sh to make and send storm surge"
   # "                    bulletins."
   # "         03/08/00 - Modified by Steve Gilbert to run on IBM SP"
   # "         09/25/00 - Added West Coast and Arctic basins.       "
   # "         11/28/00 - Modified by Peter Henrichsen to replace"
   # "                    onebul.sh with perl script formbul.pl"
   # "         06/12/02 - Added dbnet alerts to get files to TGFTP"
   # "         09/01/01 - Model changes using all 4 cycles of GFS's"
   # "         analyses. Do without rotating the analysis files. J. Chen"
   # "         08/16/02 - Combined J.Chen's version with operational script"
   # "         10/16/05 - Modified to send text bulletins to TOC via the   "
   # "         10/16/05 - NTC rather than the status file.
   # "         10/14/14 - ETSS1.5 is implemented by H. Liu, which use 0.5 deg GFS"
   # "                    instead of 1.0 deg GFS"
   # "         10/16/14 - First Version of ETSS2.0 by H. Liu, which use nesting"
   # "                    tech and overland flooding"
   # "         02/06/15 - Change name from gfs_stormsurge to etss by H.Liu  "
   # "         04/06/15 - First Version of ETSS2.1 H.Liu, which includes Tide"
   # "                    and replace two separate (Arctic and Alaksa) basins"
   # "                    by single one basin (Bering)"
   # "         10/12/15 - ETSS2.1 is implemented by H.Liu "
   # "         04/06/16 - First Version of ETSS2.2 H.Liu, which replace west"
   # "                    coast basin by NEP basin covering Gulf of ALA and Wst"
   # "         12/06/17 - ETSS2.2 is implemented by H.Liu "
   # "         03/06/18 - First Version of ETSS2.3 by H.Liu, which uses 1-hourly 13km"
   # "                    resolution GFS wind, updates est coast and GOM basin"
   # "         07/06/20 - Second Version of ETSS2.3 by H.Liu, which added initial"
   # "                    condition and operationalize image generation"
   # "         09/16/21 - Huiqing.Liu, converted from ex-scripts to ush/scripts"
   # " ---------------------------------------------------------"
   # Parameters:
   #  Inputs:  1) Last cycle's water initital wate condition file and csv files
   #           2) GFS wind files for each basin generated by ETSS_PREWND job
   #           3) sds.${cyc} to make sure wind files are good
   #           4) mask file for NEP basin - parm file
   #           5) GFS 13km interploation mask file - parm file
   #
   #
   #  Outputs: poe-script - list of running scripts for mpiexec
   #           ETSS text products - ${COMOUT}/etss.t${cyc}z.storm*.txt
   #           ETSS native resolution gridded data - ${DATA}/fle*
  
set -x
export RANK=$1

echo "`date`: Start Rank ${RANK}" >> timing.txt

msg="Begin job for $job"
postmsg "$jlogfile" "$msg"

if [[ ${RANK} == 0 ]] ; then
############################################################
# Copy mask file for NEP basin to work directory
# Copy GFS 13km interploation mask file to work directory
# Copy Initial Water level condition file
############################################################
  cpreq $PARMetss/model/grid_depth_nep.txt grid_depth_nep.txt
  cpreq $PARMetss/model/water-levels.dat ./
  cpreq $PARMetss/model/lon_GFST1534 ./
  cpreq $PARMetss/model/lat_GFST1534 ./

  if [[ ${cyc} == 00 ]]; then
    oldcyc=18
    cp ${COMINSS}/${RUN}.${PDYm1}/t${oldcyc}z_csv/*.csv ./
    cp ${COMINSS}/${RUN}.${PDYm1}/etss.t${oldcyc}z.init_wl.txt ./
  else
    if [[ ${cyc} == 06 ]]; then
      oldcyc=00
    elif [[ ${cyc} == 12 ]]; then
      oldcyc=06
    else
      oldcyc=12
    fi
    cp ${COMINSS}/${RUN}.${PDY}/t${oldcyc}z_csv/*.csv ./
    cp ${COMINSS}/${RUN}.${PDY}/etss.t${oldcyc}z.init_wl.txt ./
  fi

  if [[ -s etss.t${oldcyc}z.init_wl.txt ]] ; then
  { read
    while IFS=, read -r f c d ; do
      myfn=`echo $c`
      echo $f > wl.surge.$myfn
      echo $f > wl.surge_tide.$myfn
      echo 0 > wl.tide.$myfn
    done
  }  < etss.t${oldcyc}z.init_wl.txt
  fi
  cpreq wl.surge.hmi3 wl.surge.pb3
  cpreq wl.surge_tide.hmi3 wl.surge_tide.pb3

  echo "`date`: Rank ${RANK} Finished copying grid file for NEP" >> timing.txt
  echo "Finished nep grid copy" > msg_Done_nep_cp.txt

elif [[ ${RANK} == 1 ]] ; then  
  echo 'Y' > ./sds.${cyc}
#  cpreq ${COMINSS}/${RUN}.${PDY}/gfspuv.* ./
#  rm ${COMINSS}/${RUN}.${PDY}/gfspuv.*
  echo "Finished ForeWND copy" > msg_Done_forewnd_cp.txt
elif [[ ${RANK} == 2 ]] ; then
#  cpreq ${COMINSS}/${RUN}.${PDY}/cylf10.* ./
#  rm ${COMINSS}/${RUN}.${PDY}/cylf10.*
  echo "Finished ForeWND copy" > msg_Done_hindwnd_cp.txt
fi

while [[ ! -f msg_Done_hindwnd_cp.txt || ! -f msg_Done_forewnd_cp.txt || ! -f msg_Done_nep_cp.txt ]] ; do
  echo "`date`: Rank ${RANK} waiting for copying files." >> timing.txt
  sleep 1
done
  
echo "`date`: Rank ${RANK} Starting model runs at extra tropical basins." >> timing.txt

if [[ ${RANK} == 0 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast extra-tropical basins surge only." >> timing.txt

  ${USHetss}/etss_poe.sh e ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished east coast extra-tropical basins surge only run." >> timing.txt
  echo "Model in East Coast Surge only is completed" > msg_EastDone.txt


elif [[ ${RANK} == 1 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs ALA extra-tropical basins surge,tide and surge + tide." >> timing.txt

  ${USHetss}/etss_poe.sh ala ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished gulf of ALA extra-tropical basins surge,tide and surge + tide run." >> timing.txt
  echo "Model in Ak Surge only is completed" > msg_AKDone.txt

elif [[ ${RANK} == 2 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico extra-tropical basins surge only." >> timing.txt

  ${USHetss}/etss_poe.sh g ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished Gulf of Mexico extra-tropical basins surge only run." >> timing.txt
  echo "Model in Gulf Surge only is completed" > msg_GulfDone.txt


elif [[ ${RANK} == 3 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs New Bering Sea extra-tropical basins surge_tide." >> timing.txt

  ${USHetss}/etss_poe.sh m ${cyc} ${PARMetss} ${EXECetss} V2.2.100

  echo "`date`: Rank ${RANK} finished New Bering Sea extra-tropical basins surge_tide run." >> timing.txt
  echo "Model in New Ala Bering Surge_tide is completed" > msg_NewBeringDone_surge_tide.txt

  while [[ ! -f msg_NewBeringDone_surge.txt ]] ; do
        echo "`date`: Rank ${RANK} Sleeping." >> timing.txt
        sleep 1
  done


###################################################################
#  Post process station output for Alaska regions
####################################################################
  for bsn in k m ; do
  
  ####################################################################
  #  Run program to extract storm surge output.
  ####################################################################
    for fle_ext in surge surge_tide; do

    export pgm="etss_out_stn"
    . prep_step

    echo $bsn > control_station.${bsn}.txt
    export FORT10=control_station.${bsn}.txt
    export FORT11=$PARMetss/model/mdl_ft11_${fle_ext}.${bsn}
    export FORT14=$PARMetss/model/mdl_ft01.ega
    export FORT67=$PARMetss/model/mdl_ettgp.${bsn}_2nd
    export FORT16=gfspuv.${cyc}${bsn}

    if [[ ${fle_ext} == surge ]] ; then
       fle_extf="stormsurge"
    else
       fle_extf="stormtide"
    fi

    export FORT17=sshistory.${fle_ext}.${cyc}${bsn}
    export FORT18=fle10.${fle_ext}.${bsn}
    export FORT34=sshistory.${fle_ext}.${cyc}${bsn}_2nd
    export FORT35=fle70.${fle_ext}.${bsn}
   
    if [[ ${bsn} == m ]] ; then

       bsnf="ber"
       if [[ ${fle_ext} == surge ]] ; then
          export FORT57=mdlsurge.${cyc}a
          export FORT58=mdlsurge.${cyc}z
       else
          export FORT57=tmp1.mdlsurge.stormtide.${cyc}${bsn}
          export FORT58=tmp1.mdlsurge.stormtide.${cyc}${bsn}
       fi
 
       export FORT12=$PARMetss/model/mdl_ft11_${fle_ext}.a
       export FORT13=$PARMetss/model/mdl_ft11_${fle_ext}.z
       export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt
       export FORT96=sds.${cyc}
       startmsg
       $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
       export err=$?; err_chk
       echo "`date`: Finished extracting text answers for ${bsn} ${fle_ext}" >> timing.txt

    else

       bsnf="goa"
       if [[ ${fle_ext} == surge ]] ; then
          export FORT58=mdlsurge.${cyc}${bsn}
       else
          export FORT58=tmp.mdlsurge.stormtide.${cyc}${bsn}
       fi

       export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt
       export FORT96=sds.${cyc}

       startmsg
       $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
       export err=$?; err_chk

       echo "`date`: Finished extracting text answers for ${bsn} ${fle_ext}" >> timing.txt

    fi

    done # surge and surge_tide loop

    if test "$SENDCOM" = 'YES'
    then
      cp mdlsurge.${cyc}* $COMOUT/
      cp etss.${cycle}.*.${bsnf}.txt $COMOUT/
    fi

  ####################################################################
  #  Send text messages to NWS FTP server.
  ####################################################################

    if test "$SENDDBN" = 'YES'
    then

      if [[ ${bsn} == m ]] ; then
       $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/mdlsurge.${cyc}a
       $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/mdlsurge.${cyc}z
      else
       $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/mdlsurge.${cyc}${bsn}
      fi

       $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormsurge.${bsnf}.txt
       $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormtide.${bsnf}.txt
     
    fi

  #
  # create the extratropical storm surge bulletins by using NCEP's
  # form_ntc.pl software to make the bulletins.
  #

    if [[ ${bsn} == m ]] ; then
       name="fqak23"
       label="bering"
       $USHutil/form_ntc.pl -d $name -f mdlsurge.${cyc}a \
       -j $job -m $NET -p $COMOUTwmo -s $SENDDBN_NTC -o txt.etss.${cycle}.${name}_stormsurge.${label}
       export err=$?; err_chk
       name="fqac23"
       label="arctic"
       $USHutil/form_ntc.pl -d $name -f mdlsurge.${cyc}z \
       -j $job -m $NET -p $COMOUTwmo -s $SENDDBN_NTC -o txt.etss.${cycle}.${name}_stormsurge.${label}
       export err=$?; err_chk
    else
       name="fqga23"
       label="gulfAK"
       $USHutil/form_ntc.pl -d $name -f mdlsurge.${cyc}${bsn} \
       -j $job -m $NET -p $COMOUTwmo -s $SENDDBN_NTC -o txt.etss.${cycle}.${name}_stormsurge.${label}
       export err=$?; err_chk
    fi
    echo "`date`: Finished transmitting text answers for ${bsn}" >> timing.txt

  done      #  Basin loop

  ##------------------------------------------##
  ## Merging Alaska NDFD grids to grib2 file  ##
  ##------------------------------------------##

  echo "`date`: Rank ${RANK} preparing gridmerge" >> timing.txt

  . prep_step

  export pgm="etss_out_grid"

  echo "`date`: Rank ${RANK} Merge 6KM ALA is skipped in this implementation ETSS2.2" > msg_Done_ALA.txt

#---------------------------------------------------------------------
  area=ala
  area1=ala2
  gridhighres=3km
  NESTYN=N

 #
 #  Merging Alaska NDFD 3 km grids using 2 new basins for surge and surge+tide
 #
  . prep_step
  export pgm="etss_out_grid"

  for fle_ext in surge surge_tide ; do
   
     if [[ ${fle_ext} == surge ]] ; then   
        fle_extf="stormsurge"
     else
        fle_extf="stormtide"
     fi

     echo "`date`: Rank ${RANK} gridmerge 3km ALA using 2 new extra tropical basins for ${fle_ext} run" >> timing.txt

   ##########set up date info... PDY is today, PDYm1 one day ago... etc.
     echo $PDY $cyc > $DATA/datetime.${area1}.txt
     export FORT17=$DATA/datetime.${area1}.txt
   ##########write area and cycle into control file
     echo $area $fle_extf $NESTYN 1 103 > $DATA/control.${area1}.txt
     export FORT11=$DATA/control.${area1}.txt

     export FORT10=ssgrid.${fle_ext}.${cyc}m

     export FORT12=$PARMetss/mergemask/mdl_etgrids.${area}
     export FORT13=fle40.${fle_ext}.m
     export FORT14=fle40.${fle_ext}.k
     export FORT16=$PARMetss/mergemask/mdl_etalaska_etss2.1.bin
     export FORT53=etss.${cycle}.${fle_extf}.${area}${gridhighres}
     export FORT54=etss.${cycle}.max.${fle_extf}.${area}${gridhighres}
     startmsg

     $EXECetss/etss_out_grid >> $pgmout 2> errfile_${RANK}

     err=$?;export err; err_chk
     echo "`date`: ank ${RANK} ating GRIB message for 3km ${area} ${fle_ext} run" >> timing.txt
     echo "Merge 3km ALA is complete" > msg_Done_newALA.txt
  done

  for fle_extf in stormsurge stormtide ; do
      . prep_step
 
      export pgm=tocgrib2

      export FORT11=etss.${cycle}.${fle_extf}.${area}${gridhighres}
      export FORT31=""
      export FORT51=etss.${cycle}.${fle_extf}.${area}${gridhighres}.grib2

      startmsg
      ${TOCGRIB2} < $PARMetss/wmoheader/grib2.t${cyc}z.mdl_${fle_extf}_${area}_102  >> $pgmout 2> errfile_${RANK}
      export err=$?; err_chk
   
  done

  if [ $SENDCOM = YES ]
  then
     cpreq etss.${cycle}.stormsurge.${area}${gridhighres} $COMOUT/etss.${cycle}.stormsurge.${area}${gridhighres}.grib2
     cpreq etss.${cycle}.stormtide.${area}${gridhighres} $COMOUT/etss.${cycle}.stormtide.${area}${gridhighres}.grib2
     cpreq etss.${cycle}.max.stormtide.${area}${gridhighres} $COMOUT/etss.${cycle}.max.stormtide.${area}${gridhighres}.grib2
     if [[ $SENDECF == YES ]]; then
        ecflow_client --event alaska_done
     fi
  fi

  ################################################
  # Alert the file (WOC SBN)
  ################################################
  cpreq etss.${cycle}.stormtide.${area}${gridhighres}.grib2 $COMOUTwmo/grib2.etss.${cycle}.stormtide.${area}${gridhighres}.etss_${cyc}
  cpreq etss.${cycle}.stormsurge.${area}${gridhighres}.grib2 $COMOUTwmo/grib2.etss.${cycle}.stormsurge.${area}${gridhighres}.etss_${cyc}
  if [ $SENDDBN_NTC = YES ]
  then
    $DBNROOT/bin/dbn_alert NTC_LOW ${RUN} $job $COMOUTwmo/grib2.etss.${cycle}.stormsurge.${area}${gridhighres}.etss_${cyc}
    $DBNROOT/bin/dbn_alert NTC_LOW ${RUN} $job $COMOUTwmo/grib2.etss.${cycle}.stormtide.${area}${gridhighres}.etss_${cyc}
  fi

  ################################################
  # Alert the file (WOC ftp)
  ################################################
  if test "$SENDDBN" = 'YES'
  then
    $DBNROOT/bin/dbn_alert MDLFCST ETSSGB2 $job $COMOUT/etss.${cycle}.stormsurge.${area}${gridhighres}.grib2
    $DBNROOT/bin/dbn_alert MDLFCST ETSSGB2 $job $COMOUT/etss.${cycle}.stormtide.${area}${gridhighres}.grib2
    $DBNROOT/bin/dbn_alert MDLFCST ETSSGB2 $job $COMOUT/etss.${cycle}.max.stormtide.${area}${gridhighres}.grib2
  fi

#--------------------------------------------------------#
# Finished post processing of Alaska Regions Bains A,Z,K #
#--------------------------------------------------------#

elif [[ ${RANK} == 4 ]] ; then


  ${USHetss}/etss_poe.sh cp5 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in cp5 Tide only is completed" > msg_Done_tropical1_tide.txt
  echo "`date`: Rank ${RANK} finished cp5 tropical tide only run." >> timing.txt

elif [[ ${RANK} == 5 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs nep surge only." >> timing.txt

  ${USHetss}/etss_poe.sh nep ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nep surge only complete" > msg_NepDone_surge.txt
  echo "`date`: Rank ${RANK} finished nep surge only run." >> timing.txt
####
### post-processing text produts (west coastal stations)
  echo "`date`: Rank ${RANK} start processing text produts from nep surge only run." >> timing.txt
  bsn=n
  bsn1=w
  fle_ext=surge
  fle_extf="stormsurge"
  bsnf="wst"

  export pgm="etss_out_stn"
  . prep_step

  echo $bsn > control_station.${bsn}.txt
  export FORT10=control_station.${bsn}.txt
  export FORT11=$PARMetss/model/mdl_ft11_${fle_ext}.${bsn}
  export FORT14=$PARMetss/model/mdl_ft01.ega
  export FORT67=$PARMetss/model/mdl_ettgp.${bsn}_2nd
  export FORT16=gfspuv.${cyc}${bsn}

  export FORT17=sshistory.${fle_ext}.${cyc}${bsn}
  export FORT18=fle10.${fle_ext}.${bsn}
  export FORT34=sshistory.${fle_ext}.${cyc}${bsn}_2nd
  export FORT35=fle70.${fle_ext}.${bsn}

  export FORT58=mdlsurge.${cyc}${bsn1}

  export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt
  export FORT96=sds.${cyc}

  $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
  export err=$?; err_chk

  echo "`date`: Rank ${RANK} Finished extracting text answers for nep surge only" >> timing.txt

####
   ####################################################################
   #  Save model output files (and some input files),  so that one can
   #    re-run the model in the future.
   ####################################################################


  if test "$SENDCOM" = 'YES'
  then
    cp mdlsurge.${cyc}${bsn1} $COMOUT/mdlsurge.${cyc}${bsn1}
    cp etss.${cycle}.${fle_extf}.${bsnf}.txt $COMOUT/etss.${cycle}.${fle_extf}.${bsnf}.txt
  fi

  ####################################################################
  #  Send text messages to NWS FTP server.
  ####################################################################

  if test "$SENDDBN" = 'YES'
  then
     $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/mdlsurge.${cyc}${bsn1}
     $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormsurge.wst.txt
  fi

  #
  # create the extratropical storm surge bulletins by using NCEP's
  # form_ntc.pl software to make the bulletins.
  #

  case $bsn1 in
    w)  name="fqpz23"; label="west";;
    *)  echo "Basin $bsn1 not recognized"; errexit;;
  esac

  $USHutil/form_ntc.pl -d $name -f mdlsurge.${cyc}${bsn1} \
    -j $job -m $NET -p $COMOUTwmo -s $SENDDBN_NTC -o txt.etss.${cycle}.${name}_stormsurge.${label}
  export err=$?; err_chk
  echo "`date`: Finished transmitting surge only text answers for ${bsn}" >> timing.txt



elif [[ ${RANK} == 6 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast tide only." >> timing.txt

  ${USHetss}/etss_poe.sh e ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in East Coast Tide only is completed" > msg_EastDone_tide.txt
  echo "`date`: Rank ${RANK} finished eas coast tide only run." >> timing.txt

elif [[ ${RANK} == 8 ]] ; then


  echo "`date`: Rank ${RANK} Starting model runs nep surge tide." >> timing.txt

  ${USHetss}/etss_poe.sh nep ${cyc} ${PARMetss} ${EXECetss} V2.4.30

  echo "Model nep surge tide complete" > msg_NepDone.txt
  echo "`date`: Rank ${RANK} finished nep surge tide run." >> timing.txt

### post-processing text produts (west coastal stations)
  echo "`date`: Rank ${RANK} start processing text produts from nep surge-tide run." >> timing.txt
    bsn=n
    fle_ext=surge_tide
    bsnf="wst"
 
    export pgm="etss_out_stn"
    . prep_step

    echo $bsn > control_station.${bsn}.txt
    export FORT10=control_station.${bsn}.txt
    export FORT11=$PARMetss/model/mdl_ft11_${fle_ext}.${bsn}
    export FORT14=$PARMetss/model/mdl_ft01.ega
    export FORT67=$PARMetss/model/mdl_ettgp.${bsn}_2nd
    export FORT16=gfspuv.${cyc}${bsn}

    if [[ ${fle_ext} == surge ]] ; then
       fle_extf="stormsurge"
    elif [[ ${fle_ext} == surge_tide ]] ; then
       fle_extf="stormtide"
    else
       fle_extf="tide"
    fi
 
    export FORT17=sshistory.${fle_ext}.${cyc}${bsn}
    export FORT18=fle10.${fle_ext}.${bsn}
    export FORT34=sshistory.${fle_ext}.${cyc}${bsn}_2nd
    export FORT35=fle70.${fle_ext}.${bsn}


    if [[ ${fle_ext} == surge ]] ; then
        export FORT58=mdlsurge.${cyc}${bsn}
    else
        export FORT58=tmp.mdlsurge.${fle_extf}.${cyc}${bsn}
    fi
 
    export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt
    export FORT96=sds.${cyc}
 
    $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
    export err=$?; err_chk

    echo "`date`: Rank ${RANK} Finished extracting text answers for nep surge-tide only" >> timing.txt

####
   ####################################################################
   #  Save model output files (and some input files),  so that one can
   #    re-run the model in the future.
   ####################################################################


  if test "$SENDCOM" = 'YES'
  then
    cp etss.${cycle}.${fle_extf}.${bsnf}.txt $COMOUT/etss.${cycle}.${fle_extf}.${bsnf}.txt
  fi

  ####################################################################
  #  Send text messages to NWS FTP server.
  ####################################################################

  if test "$SENDDBN" = 'YES'
  then
     $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormtide.wst.txt
  fi


  echo "`date`: Finished transmitting surge+tide text answers for ${bsn}" >> timing.txt



elif [[ ${RANK} == 9 ]] ; then


  echo "`date`: Rank ${RANK} Starting model runs east coast I tide only." >> timing.txt

  ${USHetss}/etss_poe.sh e1 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in east coast I Tide only is completed" > msg_Done_tropical2_tide.txt
  echo "`date`: Rank ${RANK} finished east coast I tide only run." >> timing.txt
  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico tropical tide only." >> timing.txt

  ${USHetss}/etss_poe.sh g1 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model nesting Gulf of mexico complete" > msg_Done_tropical3_tide.txt
  echo "`date`: Rank ${RANK} finished Gulf of Mexico tropical tide only run." >> timing.txt
### New arrange ment from CPU 8

 
  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico tide only." >> timing.txt

  ${USHetss}/etss_poe.sh g ${cyc} ${PARMetss} ${EXECetss} T1
 
  echo "Model in Gulf Tide only is completed" > msg_GulfDone_tide.txt
  echo "`date`: Rank ${RANK} finished Gulf of Mexico tide only run." >> timing.txt

#####

elif [[ ${RANK} == 11 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs hpa2 tide only." >> timing.txt

  ${USHetss}/etss_poe.sh hpa2 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in hpa2 Tide only is completed" > msg_Done_tropical7_tide.txt
  echo "`date`: Rank ${RANK} finished hpa2 tide only run." >> timing.txt

elif [[ ${RANK} == 13 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs New Bering Sea extra-tropical basins surgeonly." >> timing.txt

  ${USHetss}/etss_poe.sh m ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished New Bering Sea extra-tropical basins surge only run." >> timing.txt
  echo "Model in New Ala Bering Surge only is completed" > msg_NewBeringDone_surge.txt


  echo "`date`: Rank ${RANK} Starting model runs epn3 tide only." >> timing.txt

  ${USHetss}/etss_poe.sh epn3 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in epn3 Tide only is completed" > msg_Done_tropical5_tide.txt
  echo "`date`: Rank ${RANK} finished epn3 tide only run." >> timing.txt


fi


while [[ ! -f msg_GulfDone.txt ]] ; do
  if [[ ${RANK} == 2 || ${RANK} == 13 || ${RANK} == 8 || ${RANK} == 9 ]] ; then
    echo "`date`: Rank ${RANK} Sleeping." >> timing.txt
    sleep 1
  else
    break
  fi
done

while [[ ! -f msg_EastDone.txt ]] ; do
  echo "`date`: Rank ${RANK} Sleeping." >> timing.txt
  sleep 1
done

echo "`date`: Rank ${RANK} Starting model nesting runs at tropical basins." >> timing.txt

if [[ ${RANK} == 0 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs cp5 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh cp5 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting cp5 complete" > msg_Done_nest1_tide.txt
  echo "`date`: Rank ${RANK} finished cp5 surge_tide run." >> timing.txt

elif [[ ${RANK} == 1 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast II tropical surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh e2 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting east coast II complete" > msg_Done_nest6_tide.txt
  echo "`date`: Rank ${RANK} finished east coast II tropical surge_tide run." >> timing.txt

elif [[ ${RANK} == 2 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico tropical surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh g1 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting Gulf of mexico complete" > msg_Done_nest3_tide.txt
  echo "`date`: Rank ${RANK} finished Gulf of Mexico tropical surge_tide run." >> timing.txt

elif [[ ${RANK} == 3 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs ht3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ht3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting ht3 complete" > msg_Done_nest12_tide.txt
  echo "`date`: Rank ${RANK} finished ht3 surge_tide only." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ebp3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ebp3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting ebp3 complete" > msg_Done_nest13_tide.txt

  echo "`date`: Rank ${RANK} finished ebp3 surge_tide only." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs hor3 surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh hor3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting hor3 complete" > msg_Done_nest8_surge.txt
  echo "`date`: Rank ${RANK} finished hor3 surge only run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs hor3 surge tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh hor3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting Gulf of mexico complete" > msg_Done_nest8_tide.txt
  echo "`date`: Rank ${RANK} finished hor3 surge tide run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs hpa2 tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh hpa2 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting hpa2 complete" > msg_Done_nest7_surge.txt
  echo "`date`: Rank ${RANK} finished hpa2 tropical surge only run." >> timing.txt


elif [[ ${RANK} == 4 ]] ; then 

  echo "`date`: Rank ${RANK} Starting model runs ejx3 surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ejx3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model ejx3 complete" > msg_Done_nest5_surge.txt
  echo "`date`: Rank ${RANK} finished ejx3 surge only run." >> timing.txt

 echo "`date`: Rank ${RANK} Starting model runs egl3 tropical surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh egl3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting egl3 complete" > msg_Done_nest9_tide.txt
  echo "`date`: Rank ${RANK} finished egl3 tropical surge_tide run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ebp3 surge only" >> timing.txt

  ${USHetss}/etss_nest_poe.sh ebp3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting ebp3 complete" > msg_Done_nest13_surge.txt
  echo "`date`: Rank ${RANK} finished ebp3 surge only." >> timing.txt


elif [[ ${RANK} == 5 ]] ; then


  echo "`date`: Rank ${RANK} Starting model runs east coast II tide only." >> timing.txt

  ${USHetss}/etss_poe.sh e2 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in east coast II Tide only is completed" > msg_Done_tropical6_tide.txt
  echo "`date`: Rank ${RANK} finished eas coast II tide only run." >> timing.txt


  echo "`date`: Rank ${RANK} Starting model runs ejx3 tide only." >> timing.txt

  ${USHetss}/etss_poe.sh ejx3 ${cyc} ${PARMetss} ${EXECetss} T1

  echo "Model in ejx3 Tide only is completed" > msg_Done_tropical4_tide.txt
  echo "`date`: Rank ${RANK} finished ejx3 tide only run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh g1b ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished Gulf of Mexico tropical g1b surge only run." >> timing.txt

elif [[ ${RANK} == 6 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs ejx3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ejx3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model ejx3 complete" > msg_Done_nest5_tide.txt
  echo "`date`: Rank ${RANK} finished ejx3 surge_tide run." >> timing.txt


  echo "`date`: Rank ${RANK} Starting model runs ht3 surge only" >> timing.txt

  ${USHetss}/etss_nest_poe.sh ht3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting ht3 complete" > msg_Done_nest12_surge.txt
  echo "`date`: Rank ${RANK} finished ht3 surge only." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ny3 surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ny3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting ny3 complete" > msg_Done_nest10_surge.txt
  echo "`date`: Rank ${RANK} finished ny3 surge only run." >> timing.txt


elif [[ ${RANK} == 7 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh e1 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting e1 complete" > msg_Done_nest2_surge.txt
  echo "`date`: Rank ${RANK} finished east coast tropical surge only run." >> timing.txt

elif [[ ${RANK} == 8 ]] ; then


  echo "`date`: Rank ${RANK} Starting model runs Gulf of Mexico tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh g1a ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting Gulf of mexico complete" > msg_Done_nest3_surge.txt
  echo "`date`: Rank ${RANK} finished Gulf of Mexico tropical surge only run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs emo2 surge only" >> timing.txt

  ${USHetss}/etss_nest_poe.sh emo2 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished emo2 surge only run." >> timing.txt

  echo "Model nesting emo2 complete" > msg_Done_nest44_surge.txt

  echo "`date`: Rank ${RANK} Starting model runs hpa2 tropical surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh hpa2 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting hpa2 complete" > msg_Done_nest7_tide.txt
  echo "`date`: Rank ${RANK} finished hpa2 tropical surge_tide run." >> timing.txt


elif [[ ${RANK} == 9 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs epn3 tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh epn3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "`date`: Rank ${RANK} finished epn3 tropical surge only run." >> timing.txt
  echo "Model nesting epn3 complete" > msg_Done_nest4_surge.txt

elif [[ ${RANK} == 10 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs cp5 tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh cp5 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting cp5 complete" > msg_Done_nest1_surge.txt
  echo "`date`: Rank ${RANK} finished cp5 tropical surge run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ny3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ny3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting ny3 complete" > msg_Done_nest10_tide.txt
  echo "`date`: Rank ${RANK} finished ny3 surge_tide run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ap3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh ap3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting ap3 complete" > msg_Done_nest11_tide.txt
  echo "`date`: Rank ${RANK} finished ap3 surge_tide run." >> timing.txt


elif [[ ${RANK} == 11 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast II tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh e2 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting east coast II complete" > msg_Done_nest6_surge.txt
  echo "`date`: Rank ${RANK} finished east coast II tropical surge only run." >> timing.txt

elif [[ ${RANK} == 12 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs east coast I surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh e1 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting e1 complete" > msg_Done_nest2_tide.txt
  echo "`date`: Rank ${RANK} finished east coast I surge_tide run." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs ap3 and ps2 surge only" >> timing.txt

  ${USHetss}/etss_nest_poe.sh g1c ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting ap3 and ps2 complete" > msg_Done_nest11_surge.txt
  echo "`date`: Rank ${RANK} finished ap3 and ps2 surge only run." >> timing.txt


elif [[ ${RANK} == 13 ]] ; then

  echo "`date`: Rank ${RANK} Starting model runs epn3 surge_tide." >> timing.txt

  ${USHetss}/etss_nest_poe.sh epn3 ${cyc} ${PARMetss} ${EXECetss} VDEF

  echo "Model nesting epn3 complete" > msg_Done_nest4_tide.txt
  echo "`date`: Rank ${RANK} finished epn3 surge_tide only." >> timing.txt

  echo "`date`: Rank ${RANK} Starting model runs egl3 tropical surge only." >> timing.txt

  ${USHetss}/etss_nest_poe.sh egl3 ${cyc} ${PARMetss} ${EXECetss} 0

  echo "Model nesting egl3 complete" > msg_Done_nest9_surge.txt
  echo "`date`: Rank ${RANK} finished egl3 tropical surge only run." >> timing.txt

fi


while [[ ! -f msg_Done_nest1_tide.txt || ! -f msg_Done_nest2_tide.txt || ! -f msg_Done_nest3_tide.txt || ! -f msg_Done_nest4_tide.txt || ! -f msg_Done_nest5_tide.txt || ! -f msg_Done_nest6_tide.txt || ! -f msg_Done_nest7_tide.txt || ! -f msg_Done_nest8_tide.txt || ! -f msg_Done_nest9_tide.txt || ! -f msg_Done_nest10_tide.txt || ! -f msg_Done_nest11_tide.txt || ! -f msg_Done_nest1_surge.txt || ! -f msg_Done_nest2_surge.txt || ! -f msg_Done_nest3_surge.txt || ! -f msg_Done_nest4_surge.txt || ! -f msg_Done_nest5_surge.txt || ! -f msg_Done_nest6_surge.txt || ! -f msg_Done_nest7_surge.txt || ! -f msg_Done_nest8_surge.txt || ! -f msg_Done_nest9_surge.txt || ! -f msg_Done_nest10_surge.txt || ! -f msg_Done_nest11_surge.txt || ! -f msg_Done_nest12_tide.txt || ! -f msg_Done_nest12_surge.txt || ! -f msg_Done_nest13_surge.txt || ! -f msg_Done_nest44_surge.txt ]] ; do
  echo "`date`: Rank ${RANK} Sleeping." >> timing.txt
  sleep 1
done

###################################################################
#  Post process the basin runs.
####################################################################

if [[ ${RANK} == 10 ]] ; then

echo "`date`: Rank ${RANK} preparing extracting text product for e and g" >> timing.txt

for bsn in e g ; do
  ####################################################################
  #  Run program to extract storm surge output.
  ####################################################################

 . prep_step

 export pgm="etss_out_stn"


 echo $bsn > control_station.${bsn}.txt
 export FORT10=control_station.${bsn}.txt
 export FORT14=$PARMetss/model/mdl_ft01.ega
 export FORT16=gfspuv.${cyc}${bsn}
 export FORT96=sds.${cyc}

 export FORT12=sshistory.surge.${cyc}${bsn}
 export FORT13=sshistory.surge.${cyc}${bsn}_2nd

 for fle_ext in surge surge_tide ; do

  if [[ ${fle_ext} == surge ]] ; then
     fle_extf="stormsurge"
     export FORT58=mdlsurge.${cyc}${bsn}
  else
     fle_extf="stormtide"
     export FORT58=tmp.mdlsurge.stormtide.${cyc}${bsn}
  fi
  export FORT11=$PARMetss/model/mdl_ft11_${fle_ext}.${bsn}

  if [[ ${bsn} == e ]] ; then
     
     bsnf=est

     export FORT17=fle10.${fle_ext}.pn2
     export FORT18=fle10.${fle_ext}.pv2
     export FORT19=fle10.${fle_ext}.ny3
     export FORT20=fle10.${fle_ext}.de3
     export FORT21=fle10.${fle_ext}.cp5
     export FORT22=fle10.${fle_ext}.hor3
     export FORT23=fle10.${fle_ext}.ht3
     export FORT24=fle10.${fle_ext}.il3
     export FORT25=fle10.${fle_ext}.hch2
     export FORT26=fle10.${fle_ext}.esv4
     export FORT27=fle10.${fle_ext}.ejx3
     export FORT28=fle10.${fle_ext}.co2
     export FORT29=fle10.${fle_ext}.hmi3

     export FORT34=fle70.${fle_ext}.pn2
     export FORT35=fle70.${fle_ext}.pv2
     export FORT36=fle70.${fle_ext}.ny3
     export FORT37=fle70.${fle_ext}.de3
     export FORT38=fle70.${fle_ext}.cp5
     export FORT39=fle70.${fle_ext}.hor3
     export FORT40=fle70.${fle_ext}.ht3
     export FORT41=fle70.${fle_ext}.il3
     export FORT42=fle70.${fle_ext}.hch2
     export FORT43=fle70.${fle_ext}.esv4
     export FORT44=fle70.${fle_ext}.ejx3
     export FORT45=fle70.${fle_ext}.co2
     export FORT46=fle70.${fle_ext}.hmi3

     export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt

     export FORT67=$PARMetss/model/mdl_ettgp.pn2_2nd
     export FORT68=$PARMetss/model/mdl_ettgp.pv2_2nd
     export FORT69=$PARMetss/model/mdl_ettgp.ny3_2nd
     export FORT70=$PARMetss/model/mdl_ettgp.de3_2nd
     export FORT71=$PARMetss/model/mdl_ettgp.cp5_2nd
     export FORT72=$PARMetss/model/mdl_ettgp.hor3_2nd
     export FORT73=$PARMetss/model/mdl_ettgp.ht3_2nd
     export FORT74=$PARMetss/model/mdl_ettgp.il3_2nd
     export FORT75=$PARMetss/model/mdl_ettgp.hch2_2nd
     export FORT76=$PARMetss/model/mdl_ettgp.esv4_2nd
     export FORT77=$PARMetss/model/mdl_ettgp.ejx3_2nd
     export FORT78=$PARMetss/model/mdl_ettgp.co2_2nd
     export FORT79=$PARMetss/model/mdl_ettgp.hmi3_2nd

     startmsg
     $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
     export err=$?; err_chk
  elif [[ ${bsn} == g ]]; then

     bsnf=gom

     export FORT17=fle10.${fle_ext}.efm2
     export FORT18=fle10.${fle_ext}.etp3
     export FORT19=fle10.${fle_ext}.cd2
     export FORT20=fle10.${fle_ext}.ap3
     export FORT21=fle10.${fle_ext}.hpa2
     export FORT22=fle10.${fle_ext}.epn3
     export FORT23=fle10.${fle_ext}.emo2
     export FORT24=fle10.${fle_ext}.ms7
     export FORT25=fle10.${fle_ext}.lf2
     export FORT26=fle10.${fle_ext}.ebp3
     export FORT27=fle10.${fle_ext}.egl3
     export FORT28=fle10.${fle_ext}.ps2
     export FORT29=fle10.${fle_ext}.cr3
     export FORT30=fle10.${fle_ext}.ebr3
     export FORT31=fle10.${fle_ext}.eke2

     export FORT34=fle70.${fle_ext}.efm2
     export FORT35=fle70.${fle_ext}.etp3
     export FORT36=fle70.${fle_ext}.cd2
     export FORT37=fle70.${fle_ext}.ap3
     export FORT38=fle70.${fle_ext}.hpa2
     export FORT39=fle70.${fle_ext}.epn3
     export FORT40=fle70.${fle_ext}.emo2
     export FORT41=fle70.${fle_ext}.ms7
     export FORT42=fle70.${fle_ext}.lf2
     export FORT43=fle70.${fle_ext}.ebp3
     export FORT44=fle70.${fle_ext}.egl3
     export FORT45=fle70.${fle_ext}.ps2
     export FORT46=fle70.${fle_ext}.cr3
     export FORT47=fle70.${fle_ext}.ebr3
     export FORT48=fle70.${fle_ext}.eke2
 
     export FORT59=etss.${cycle}.${fle_extf}.${bsnf}.txt     

     export FORT67=$PARMetss/model/mdl_ettgp.efm2_2nd
     export FORT68=$PARMetss/model/mdl_ettgp.etp3_2nd
     export FORT69=$PARMetss/model/mdl_ettgp.cd2_2nd
     export FORT70=$PARMetss/model/mdl_ettgp.ap3_2nd
     export FORT71=$PARMetss/model/mdl_ettgp.hpa2_2nd
     export FORT72=$PARMetss/model/mdl_ettgp.epn3_2nd
     export FORT73=$PARMetss/model/mdl_ettgp.emo2_2nd
     export FORT74=$PARMetss/model/mdl_ettgp.ms7_2nd
     export FORT75=$PARMetss/model/mdl_ettgp.lf2_2nd
     export FORT76=$PARMetss/model/mdl_ettgp.ebp3_2nd
     export FORT77=$PARMetss/model/mdl_ettgp.egl3_2nd
     export FORT78=$PARMetss/model/mdl_ettgp.ps2_2nd
     export FORT79=$PARMetss/model/mdl_ettgp.cr3_2nd
     export FORT80=$PARMetss/model/mdl_ettgp.ebr3_2nd
     export FORT81=$PARMetss/model/mdl_ettgp.eke2_2nd

     startmsg
     $EXECetss/etss_out_stn >> $pgmout 2> errfile_${RANK}
     export err=$?; err_chk
  fi
  echo "`date`:  Rank ${RANK} Finished extracting text answers for ${bsn}" >> timing.txt

  ####################################################################
  #  Save model output files (and some input files),  so that one can
  #    re-run the model in the future.
  ####################################################################

  if test "$SENDCOM" = 'YES'
  then
    cp mdlsurge.${cyc}${bsn} $COMOUT/mdlsurge.${cyc}${bsn}
    cp etss.${cycle}.${fle_extf}.${bsnf}.txt $COMOUT/etss.${cycle}.${fle_extf}.${bsnf}.txt
  fi

 done # surge and surge+tide loop

  ####################################################################
  #  Send text messages to NWS FTP server.
  ####################################################################

  if test "$SENDDBN" = 'YES'
  then
    $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/mdlsurge.${cyc}${bsn}
    $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormsurge.${bsnf}.txt
    $DBNROOT/bin/dbn_alert MDLFCST ETSSTXT $job $COMOUT/etss.${cycle}.stormtide.${bsnf}.txt
  fi

  #
  # create the extratropical storm surge bulletins by using NCEP's
  # form_ntc.pl software to make the bulletins.
  #

  case $bsn in
    e)  name="fqus23"; label="east";;
    g)  name="fqgx23"; label="gulfMX";;
    *)  echo "Basin $bsn not recognized"; errexit;;
  esac

  $USHutil/form_ntc.pl -d $name -f mdlsurge.${cyc}${bsn} \
    -j $job -m $NET -p $COMOUTwmo -s $SENDDBN_NTC -o txt.etss.${cycle}.${name}_stormsurge.${label}
  export err=$?; err_chk
  echo "`date`: Finished transmitting text answers for ${bsn}" >> timing.txt

done      #  Basin loop

fi # CPU 10 finished text product post-processing

### Excute final script for MDL test
MDLTEST_FINALSCRIPT=${MDLTEST_FINALSCRIPT:-None}
if [[ ${MDLTEST_FINALSCRIPT} != "None" ]] ; then
   ${MDLTEST_FINALSCRIPT}
fi


#####################################################################
# GOOD RUN
set +x
echo "**************JOB gfs_stormsurge COMPLETED NORMALLY"
echo "**************JOB gfs_stormsurge COMPLETED NORMALLY"
echo "**************JOB gfs_stormsurge COMPLETED NORMALLY"
set -x
#####################################################################

echo "`date`: Rank ${RANK} Finished." >> timing.txt

############## END OF SCRIPT #######################
